// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  emailVerified   DateTime?
  firstName       String?
  lastName        String?
  password        String?
  phoneNo         String?
  alternatePhone  String?
  designation     String?
  gender          String?
  fullAddress     String?
  city            String?
  state           String?
  zipCode         String?
  avatar          Json?
  dob             String?
  permissions     String[]  @default([])
  isActive        Boolean   @default(true)
  otp             String?
  otpExpireAt     DateTime?
  walletBalance   Decimal   @default(0.00) @db.Decimal(30, 2)
  lastLoginDate   DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  accounts              Account[]
  sessions              Session[]
  bankId                String?
  bank                  Bank?                   @relation(fields: [bankId], references: [id])
  bankIds               String[]                @default([])
  walletTransactions    WalletTransaction[]
  createdRequests       Request[]               @relation("CreatedByUser")
  valuatorRequests      Request[]               @relation("ValuatorUser")
  advocateRequests      Request[]               @relation("AdvocateUser")
  userCoupons           UserCoupon[]
  createdBanks          Bank[]                  @relation("CreatedByUser")
  createdBankBranches   BankBranch[]            @relation("CreatedByUser")
  createdForms          Form[]                  @relation("CreatedByUser")
  valuatorAdvocateForms ValuatorAdvocateForm[]

  @@map("users")
}

model Bank {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId       String?
  createdBy    User?        @relation("CreatedByUser", fields: [userId], references: [id])
  users        User[]
  branches     BankBranch[]
  requests     Request[]
  forms        Form[]

  @@map("banks")
}

model BankBranch {
  id        String   @id @default(cuid())
  name      String
  address   String?
  city      String?
  state     String?
  zipCode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bankId    String
  bank      Bank      @relation(fields: [bankId], references: [id], onDelete: Cascade)
  userId    String?
  createdBy User?     @relation("CreatedByUser", fields: [userId], references: [id])
  requests  Request[]

  @@map("bank_branches")
}

model BusinessSettings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("business_settings")
}

model Category {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Coupon {
  id               String   @id @default(cuid())
  code             String   @unique
  title            String
  description      String?
  discountType     String // 'percentage' or 'fixed'
  discountValue    Decimal  @db.Decimal(10, 2)
  minimumAmount    Decimal? @db.Decimal(10, 2)
  maximumDiscount  Decimal? @db.Decimal(10, 2)
  usageLimit       Int?
  usedCount        Int      @default(0)
  isActive         Boolean  @default(true)
  validFrom        DateTime
  validUntil       DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  userCoupons UserCoupon[]

  @@map("coupons")
}

model UserCoupon {
  id        String   @id @default(cuid())
  usedAt    DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  couponId String
  coupon   Coupon @relation(fields: [couponId], references: [id], onDelete: Cascade)

  @@unique([userId, couponId])
  @@map("user_coupons")
}

model Form {
  id            String   @id @default(cuid())
  formName      String
  fields        Json // Array of form field objects
  isDefaultForm Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  bankId    String?
  bank      Bank?     @relation(fields: [bankId], references: [id])
  userId    String?
  createdBy User?     @relation("CreatedByUser", fields: [userId], references: [id])
  requests  Request[]

  @@map("forms")
}

model ImageCategory {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("image_categories")
}

model ReportCharge {
  id        String   @id @default(cuid())
  name      String
  amount    Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("report_charges")
}

model Request {
  id            String   @id @default(cuid())
  fields        Json // Array of field objects with values
  formId        String
  forWhom       String // 'advocate', 'valuator', 'both'
  requestStatus String   @default("pending")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  form                Form       @relation(fields: [formId], references: [id])
  createdBy           String
  createdByUser       User       @relation("CreatedByUser", fields: [createdBy], references: [id])
  assignedValuator    String?
  valuator            User?      @relation("ValuatorUser", fields: [assignedValuator], references: [id])
  assignedAdvocate    String?
  advocate            User?      @relation("AdvocateUser", fields: [assignedAdvocate], references: [id])
  bankId              String
  bank                Bank       @relation(fields: [bankId], references: [id])
  bankBranchesId      String?
  bankBranch          BankBranch? @relation(fields: [bankBranchesId], references: [id])

  @@map("requests")
}

model ValuatorAdvocateForm {
  id        String   @id @default(cuid())
  formData  Json // Form submission data
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("valuator_advocate_forms")
}

model WalletTransaction {
  id            String   @id @default(cuid())
  amount        Decimal  @db.Decimal(10, 2)
  type          String // 'credit', 'debit'
  description   String?
  transactionId String?  @unique
  status        String   @default("pending") // 'pending', 'completed', 'failed'
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wallet_transactions")
}
